<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Market Data</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
</head>

<body>
    <div class="row">
        <div class="col-md-12">
            <h3 class="text-center text-white">Stock Data</h3>
            
            <div id="loadingSpinner" class="text-center" style="display:none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only text-white">Loading...</span>
                </div>
                <p>Loading data..</p>
            </div>

            <div id="errorMessage" class="alert alert-danger" style="display:none;">
                Error fetching data. Please try again later.
            </div>

            <button id="refreshButton" class="btn btn-primary mb-4" onclick="fetchStockData()">Refresh Data</button>
        </div>

        <div class="col-md-4 mx-auto mt-2">
            <div class="card">
                <div class="card-body">
                    <h5>Stock Data for MSFT</h5>
                    <p><strong>Company:</strong> Microsoft</p>
                    <p>Status: <span id="msftStatus"></span></p>
                    <p id="msftNewDataMessage" class="text-success" style="display:none;">New Data Just Came In</p>
                    <canvas id="msftChart" width="auto" height="auto"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-4 mx-auto mt-2">
            <div class="card">
                <div class="card-body">
                    <h5>Stock Data for AAPL</h5>
                    <p><strong>Company:</strong> Apple</p>
                    <p>Status: <span id="aaplStatus"></span></p>
                    <p id="aaplNewDataMessage" class="text-success" style="display:none;">New Data Just Came In</p>
                    <canvas id="aaplChart" width="auto" height="auto"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-4 mx-auto mt-2">
            <div class="card">
                <div class="card-body">
                    <h5>Stock Data for IBM</h5>
                    <p><strong>Company:</strong> IBM</p>
                    <p>Status: <span id="ibmStatus"></span></p>
                    <p id="ibmNewDataMessage" class="text-success" style="display:none;">New Data Just Came In</p>
                    <canvas id="ibmChart" width="auto" height="auto"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        let msftChartInstance, aaplChartInstance, ibmChartInstance;
        let lastMsftData = null, lastAaplData = null, lastIbmData = null;

        function fetchStockData() {
            document.getElementById('loadingSpinner').style.display = 'block';
            document.getElementById('errorMessage').style.display = 'none';

            fetch('https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo')
                .then(response => response.json())
                .then(data => {
                    console.log('API Response:', data); 

                    const msftData = data.data ? data.data.find(item => item.symbol === 'MSFT') : null;
                    const aaplData = data.data ? data.data.find(item => item.symbol === 'AAPL') : null;
                    const ibmData = data.data ? data.data.find(item => item.symbol === 'IBM') : null;

                    if (msftData && aaplData && ibmData) {
                        updateChart('msftChart', msftData, 'MSFT');
                        document.getElementById('msftStatus').innerText = `Close Price: $${msftData.close}`;
                        if (!isDataEqual(lastMsftData, msftData)) {
                            showNewDataMessage('msftNewDataMessage');
                            lastMsftData = msftData;
                        }

                        updateChart('aaplChart', aaplData, 'AAPL');
                        document.getElementById('aaplStatus').innerText = `Close Price: $${aaplData.close}`;
                        if (!isDataEqual(lastAaplData, aaplData)) {
                            showNewDataMessage('aaplNewDataMessage');
                            lastAaplData = aaplData;
                        }

                        updateChart('ibmChart', ibmData, 'IBM');
                        document.getElementById('ibmStatus').innerText = `Close Price: $${ibmData.close}`;
                        if (!isDataEqual(lastIbmData, ibmData)) {
                            showNewDataMessage('ibmNewDataMessage');
                            lastIbmData = ibmData;
                        }
                    } else {
                        document.getElementById('errorMessage').style.display = 'block';
                    }

                    document.getElementById('loadingSpinner').style.display = 'none';
                })
                .catch(error => {
                    console.error('Error fetching stock data:', error);
                    document.getElementById('loadingSpinner').style.display = 'none';
                    document.getElementById('errorMessage').style.display = 'block';
                    document.getElementById('errorMessage').innerHTML = 'Error fetching data. Please try again later. ' + error.message;
                });
        }

        function updateChart(chartId, stockData, symbol) {
            const ctx = document.getElementById(chartId).getContext('2d');

            if (window[`${symbol.toLowerCase()}ChartInstance`]) {
                window[`${symbol.toLowerCase()}ChartInstance`].destroy();
            }

            window[`${symbol.toLowerCase()}ChartInstance`] = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [stockData.timestamp],
                    datasets: [{
                        label: `${symbol} Close Price`,
                        data: [parseFloat(stockData.close)],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: false,
                    },
                    {
                        label: `${symbol} Volume`,
                        data: [parseInt(stockData.volume)],
                        borderColor: 'rgba(153, 102, 255, 1)',
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        fill: false,
                        yAxisID: 'y-axis-2'
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: false
                        },
                        'y-axis-2': {
                            type: 'linear',
                            position: 'right',
                            beginAtZero: false
                        }
                    }
                }
            });
        }

        function showNewDataMessage(messageId) {
            const messageElement = document.getElementById(messageId);
            messageElement.style.display = 'block';

            setTimeout(() => {
                messageElement.style.display = 'none';
            }, 3000);
        }

        function isDataEqual(lastData, newData) {
            // Compare only the critical data points, like close price and volume
            return lastData && lastData.close === newData.close && lastData.volume === newData.volume;
        }

        setInterval(fetchStockData, 60000);

        fetchStockData();
    </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
